代理模式
   核心作用：通过代理，控制对对象的访问
   可以详细控制访问某个类的对象的方法，在调用这给方法前做前置处理，调用结束后做后置处理


   AOP（面向切面编程）的核心实现机制

   静态代理：自行定义代理类
      同时将真实类和代理类继承Star（接口），使他们拥有相同的方法
      并在代理类同真实类对应的方法中添加对真实类的调用
      再在运行的类中同时实例化 代理类和真实类  并将真实类对象作为参数传递给代理类对象中  使用代理类调用方法（完成静态代理）


   动态代理：调用程序自己的代理类
        -JDK自带的动态代理
        -javaassist字节码操作库实现
        -CGLIB
        -ASM（底层使用指令，可维护性较差）


   三要素：代理角色、真实角色、共同接口抽象角色（的前两角色的共同接口）